from pathlib import Path

path = Path('public/search.html')
text = path.read_text(encoding='utf-8')
marker = '<script src="/js/main.js"></script>'
if marker not in text:
    raise SystemExit('marker not found')
base, _ = text.split(marker, 1)
new_script_lines = []
new_script_lines.append("    <script src=\"/js/main.js\"></script>")
new_script_lines.append("    <script>")
new_script_lines.append("      (function () {")
new_script_lines.append("        'use strict';")
new_script_lines.extend([
  "        const RESULTS_PER_PAGE = 20;",
  "        const CATEGORY_LABELS = {",
  "          ecole: 'Ecoles maternelles et elementaires',",
  "          college: 'Colleges',",
  "          lycee: 'Lycees et lycees professionnels',",
  "          specialise: 'Etablissements specialises et medico-sociaux',",
  "        };",
  "        const LEGACY_CATEGORY_MAP = {",
  "          primary: 'ecole',",
  "          secondary: 'college',",
  "          'sixth-form': 'lycee',",
  "          special: 'specialise',",
  "          independent: 'specialise',",
  "          academy: 'lycee',",
  "        };",
  "        const STATUS_LABELS = {",
  "          public: 'Public',",
  "          prive: 'Prive',",
  "        };",
  "",
  "        const searchInput = document.getElementById('searchInput');",
  "        const locationInput = document.getElementById('locationInput');",
  "        const ratingInput = document.getElementById('ratingRange');",
  "        const ratingValue = document.getElementById('ratingValue');",
  "        const resultsList = document.getElementById('resultsList');",
  "        const paginationEl = document.getElementById('pagination');",
  "        const countEl = document.getElementById('resultsCount');",
  "        const clearFiltersBtn = document.querySelector('.clear-filters');",
  "        const viewButtons = Array.from(document.querySelectorAll('.view-btn'));",
  "",
  "        let searchResults = [];",
  "        let totalResults = 0;",
  "        let currentPage = 1;",
  "        let currentView = 'list';",
  "        let map = null;",
  "        let markers = null;",
  "        let isMapInitialized = false;",
  "",
  "        const urlParams = new URLSearchParams(window.location.search);",
  "        const initialQuery = urlParams.get('q') || '';",
  "        const initialTypeParam = urlParams.get('type');",
  "        const initialAreaParam = urlParams.get('area') || urlParams.get('location') || '';",
  "        const initialCategoriesParam = parseList(urlParams.get('categories'));",
  "        const initialStatusParam = parseList(urlParams.get('status'));",
  "        const initialRatingParam = parseFloat(urlParams.get('rating'));",
  "        const initialPage = parseInt(urlParams.get('page') || '1', 10);",
  "        let fallbackArea = initialAreaParam;",
  "",
  "        if (initialQuery) {",
  "          searchInput.value = initialQuery;",
  "        }",
  "        if (initialAreaParam) {",
  "          locationInput.value = initialAreaParam;",
  "        }",
  "        if (initialPage > 1) {",
  "          currentPage = initialPage;",
  "        }",
  "",
  "        applyInitialFilters();",
  "        updateHeroHeading();",
  "        updateSearchMeta();",
  "",
  "        document.addEventListener('DOMContentLoaded', () => {",
  "          attachEventListeners();",
  "          searchSchools(currentPage);",
  "        });",
])
new_script_lines.extend([
  "        function parseList(value) {",
  "          if (!value) return [];",
  "          return String(value)",
  "            .split(',')",
  "            .map((item) => item.trim().toLowerCase())",
  "            .filter(Boolean);",
  "        }",
  "",
  "        function unique(list) {",
  "          return Array.from(new Set(list));",
  "        }",
  "",
  "        function normalizeText(value) {",
  "          if (!value) return '';",
  "          return String(value)",
  "            .toLowerCase()",
  "            .normalize('NFD')",
  "            .replace(/[\\u0300-\\u036f]/g, '');",
  "        }",
  "",
  "        function resolveInitialCategories() {",
  "          if (initialCategoriesParam.length) {",
  "            return unique(initialCategoriesParam.filter((code) => CATEGORY_LABELS[code]));",
  "          }",
  "          if (!initialTypeParam) {",
  "            return [];",
  "          }",
  "          if (CATEGORY_LABELS[initialTypeParam]) {",
  "            return [initialTypeParam];",
  "          }",
  "          if (LEGACY_CATEGORY_MAP[initialTypeParam]) {",
  "            return [LEGACY_CATEGORY_MAP[initialTypeParam]];",
  "          }",
  "          return [];",
  "        }",
  "",
  "        function applyInitialFilters() {",
  "          const categorySet = new Set(resolveInitialCategories());",
  "          document",
  "            .querySelectorAll('#schoolTypeFilters input[type=\"checkbox\"]')",
  "            .forEach((checkbox) => {",
  "              checkbox.checked = categorySet.has(checkbox.value);",
  "            });",
  "",
  "          const statusSet = new Set(initialStatusParam);",
  "          document",
  "            .querySelectorAll('#statusFilters input[type=\"checkbox\"]')",
  "            .forEach((checkbox) => {",
  "              checkbox.checked = statusSet.has(checkbox.value);",
  "            });",
  "",
  "          if (!Number.isNaN(initialRatingParam) && initialRatingParam >= 1) {",
  "            const rating = Math.max(1, Math.min(5, initialRatingParam));",
  "            ratingInput.value = rating;",
  "            ratingValue.textContent = rating;",
  "          } else {",
  "            ratingValue.textContent = ratingInput.value;",
  "          }",
  "        }",
])
new_script_lines.extend([
  "        function getActiveFilters() {",
  "          const categories = Array.from(",
  "            document.querySelectorAll('#schoolTypeFilters input[type=\\"checkbox\\"]:checked'),",
  "          ).map((cb) => cb.value);",
  "          const statuses = Array.from(",
  "            document.querySelectorAll('#statusFilters input[type=\\"checkbox\\"]:checked'),",
  "          ).map((cb) => cb.value);",
  "          const rating = parseFloat(ratingInput.value);",
  "          return {",
  "            categories,",
  "            statuses,",
  "            minRating: Number.isFinite(rating) ? rating : null,",
  "          };",
  "        }",
  "",
  "        function getSearchContext() {",
  "          const queryValue = searchInput.value.trim();",
  "          const locationValue = locationInput.value.trim();",
  "",
  "          if (queryValue) {",
  "            return { q: queryValue, type: 'name' };",
  "          }",
  "",
  "          if (locationValue) {",
  "            fallbackArea = locationValue;",
  "            return { q: locationValue, type: 'location' };",
  "          }",
  "",
  "          if (fallbackArea) {",
  "            return { q: fallbackArea, type: 'location' };",
  "          }",
  "",
  "          return { q: 'ecole', type: 'all' };",
  "        }",
  "",
  "        function buildApiParams(page) {",
  "          const params = new URLSearchParams();",
  "          const { q, type } = getSearchContext();",
  "          params.append('q', q);",
  "          params.append('type', type);",
  "          params.append('limit', RESULTS_PER_PAGE.toString());",
  "          params.append('offset', ((page - 1) * RESULTS_PER_PAGE).toString());",
  "",
  "          const filters = getActiveFilters();",
  "          if (filters.categories.length) {",
  "            params.append('categories', filters.categories.join(','));",
  "          }",
  "          if (filters.statuses.length) {",
  "            params.append('status', filters.statuses.join(','));",
  "          }",
  "          if (filters.minRating && filters.minRating > 1) {",
  "            params.append('minRating', filters.minRating.toString());",
  "          }",
  "",
  "          return params;",
  "        }",
])
